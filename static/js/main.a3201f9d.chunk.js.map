{"version":3,"sources":["types/SortTypes.ts","App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","visibleGoods","setVisibleGoods","NONE","sortType","setSortType","isReversed","setIsReversed","useEffect","goodsForShow","ALPHABET","sort","a","b","localeCompare","LENGTH","length","reverse","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAAYA,E,sEAAAA,O,eAAAA,I,uBAAAA,I,oBAAAA,M,gBCMCC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGWC,EAAgB,WAC3B,MAAwCC,mBAAmB,IAA3D,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAgCF,mBAAmBH,EAASM,MAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCL,oBAAS,GAA7C,mBAAOM,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WACR,IAAMC,EAAY,UAAOX,GAEzB,OAAQM,GACN,KAAKP,EAASa,SACZD,EAAaE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MAC5C,MAEF,KAAKhB,EAASkB,OACZN,EAAaE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEI,OAASH,EAAEG,UAMzCV,GACFG,EAAaQ,UAGff,EAAgBO,KACf,CAACL,EAAUE,IAOd,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYhB,IAAaP,EAASa,WAEtCW,QAAS,kBAAMhB,EAAYR,EAASa,WAPtC,iCAYA,wBACES,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYhB,IAAaP,EAASkB,SAEtCM,QAAS,kBAAMhB,EAAYR,EAASkB,SAPtC,4BAYA,wBACEI,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,YAAad,IAEjBe,QAAS,kBAAMd,GAAeD,IAPhC,qBAYCF,IAAaP,EAASM,MAAQG,EAE3B,wBACEa,KAAK,SACLD,UAAU,4BACVG,QAjDc,WACxBhB,EAAYR,EAASM,MACrBI,GAAc,IA4CN,mBAQA,QAGN,6BACGN,EAAaqB,KAAI,SAAAC,GAAI,OACpB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YCtGnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a3201f9d.chunk.js","sourcesContent":["export enum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\nimport { SortType } from './types/SortTypes';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport const App: React.FC = () => {\n  const [visibleGoods, setVisibleGoods] = useState<string[]>([]);\n  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n\n  useEffect(() => {\n    const goodsForShow = [...goodsFromServer];\n\n    switch (sortType) {\n      case SortType.ALPHABET:\n        goodsForShow.sort((a, b) => a.localeCompare(b));\n        break;\n\n      case SortType.LENGTH:\n        goodsForShow.sort((a, b) => a.length - b.length);\n        break;\n\n      default:\n    }\n\n    if (isReversed) {\n      goodsForShow.reverse();\n    }\n\n    setVisibleGoods(goodsForShow);\n  }, [sortType, isReversed]);\n\n  const handleParamsReset = () => {\n    setSortType(SortType.NONE);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={() => setSortType(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {sortType !== SortType.NONE || isReversed\n          ? (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={handleParamsReset}\n            >\n              Reset\n            </button>\n          )\n          : null}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li key={good} data-cy=\"Good\">{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}